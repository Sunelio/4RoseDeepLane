//[VFX_KillzoneSmoke] [System] Initialize Particle,0
//Don't delete the previous line or this one
#pragma kernel CSMain
#define NB_THREADS_PER_GROUP 64
#define HAS_ATTRIBUTES 1
#define VFX_PASSDEPTH_ACTUAL (0)
#define VFX_PASSDEPTH_MOTION_VECTOR (1)
#define VFX_PASSDEPTH_SELECTION (2)
#define VFX_PASSDEPTH_SHADOW (3)
#define VFX_USE_VELOCITY_CURRENT 1
#define VFX_USE_SEED_CURRENT 1
#define VFX_USE_LIFETIME_CURRENT 1
#define VFX_USE_ANGLEZ_CURRENT 1
#define VFX_USE_POSITION_CURRENT 1
#define VFX_USE_DIRECTION_CURRENT 1
#define VFX_USE_ALIVE_CURRENT 1
#define VFX_USE_AGE_CURRENT 1
#define VFX_LOCAL_SPACE 1
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXDefines.hlsl"


CBUFFER_START(parameters)
    float3 Box_size_d;
    float A_b;
    float B_b;
    uint3 PADDING_0;
CBUFFER_END


struct Attributes
{
    float3 velocity;
    uint seed;
    float lifetime;
    float angleZ;
    float3 position;
    float3 direction;
    bool alive;
    float age;
};

struct SourceAttributes
{
};




#define USE_DEAD_LIST (VFX_USE_ALIVE_CURRENT && !HAS_STRIPS)

RWByteAddressBuffer attributeBuffer;
ByteAddressBuffer sourceAttributeBuffer;

CBUFFER_START(initParams)
#if !VFX_USE_SPAWNER_FROM_GPU
    uint nbSpawned;					// Numbers of particle spawned
    uint spawnIndex;				// Index of the first particle spawned
    uint dispatchWidth;
#else
    uint offsetInAdditionalOutput;
	uint nbMax;
#endif
	uint systemSeed;
CBUFFER_END

#if USE_DEAD_LIST
RWStructuredBuffer<uint> deadListIn;
ByteAddressBuffer deadListCount; // This is bad to use a SRV to fetch deadList count but Unity API currently prevent from copying to CB
#endif

#if VFX_USE_SPAWNER_FROM_GPU
StructuredBuffer<uint> eventList;
ByteAddressBuffer inputAdditional;
#endif

#if HAS_STRIPS
RWStructuredBuffer<uint> stripDataBuffer;
#endif

#include "Packages/com.unity.visualeffectgraph/Shaders/Common/VFXCommonCompute.hlsl"
#include "Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.hlsl"



void SetAttribute_E6295C0(inout float3 velocity, inout uint seed, float3 A, float3 B) /*attribute:velocity Composition:Overwrite Source:Slot Random:PerComponent channels:XYZ */
{
    velocity = lerp(A,B,RAND3);
}
void SetAttribute_F01429A3(inout float lifetime, inout uint seed, float A, float B) /*attribute:lifetime Composition:Overwrite Source:Slot Random:Uniform channels:XYZ */
{
    lifetime = lerp(A,B,RAND);
}
void SetAttribute_48A7C211(inout float angleZ, inout uint seed, float A, float B) /*attribute:angle Composition:Overwrite Source:Slot Random:Uniform channels:Z */
{
    angleZ = lerp(A.x,B.x,RAND);
}
void PositionAABox_18D(inout float3 position, inout uint seed, inout float3 direction, float3 Box_center, float3 Box_size) /*compositionPosition:Overwrite compositionDirection:Overwrite positionMode:Volume spawnMode:Random */
{
    
    float3 localRand3 = RAND3 - (float3)0.5f;
    float3 outPos =  Box_size * localRand3;
    
    float3 outPosSizeGreaterThanZero = max(Box_size, VFX_EPSILON) * localRand3;
    float3 planeBound = 0.5f * Box_size;
    float top    = planeBound.z - outPosSizeGreaterThanZero.z;
    float bottom = planeBound.z + outPosSizeGreaterThanZero.z;
    float front  = planeBound.y - outPosSizeGreaterThanZero.y;
    float back   = planeBound.y + outPosSizeGreaterThanZero.y;
    float right  = planeBound.x - outPosSizeGreaterThanZero.x;
    float left   = planeBound.x + outPosSizeGreaterThanZero.x;
    
    float3 outDir = float3(0,0,1);
    float min = top;
    if (bottom < min) { outDir = float3(0, 0,-1);  min = bottom; }
    if (front  < min) { outDir = float3(0, 1, 0);  min = front;  }
    if (back   < min) { outDir = float3(0,-1, 0);  min = back;   }
    if (right  < min) { outDir = float3(1, 0, 0);  min = right;  }
    if (left   < min) { outDir = float3(-1,0, 0);  min = left;   }
    direction = outDir;
    position = outPos + Box_center;
    
}



// Due to a bug in HLSL compiler, disable spurious "unitialized variable" due to mid function return statement
#pragma warning(push)
#pragma warning(disable : 4000)
#if HAS_STRIPS
bool GetParticleIndex(inout uint particleIndex, uint stripIndex)
{
	uint relativeIndex;
	InterlockedAdd(STRIP_DATA(STRIP_NEXT_INDEX, stripIndex), 1, relativeIndex);
	if (relativeIndex >= PARTICLE_PER_STRIP_COUNT) // strip is full
	{
		InterlockedAdd(STRIP_DATA(STRIP_NEXT_INDEX, stripIndex), -1); // Remove previous increment
		return false;
	}

	particleIndex = stripIndex * PARTICLE_PER_STRIP_COUNT + ((STRIP_DATA(STRIP_FIRST_INDEX, stripIndex) + relativeIndex) % PARTICLE_PER_STRIP_COUNT);
    return true;
}
#endif
#pragma warning(pop)

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSMain(uint3 groupId          : SV_GroupID,
            uint3 groupThreadId    : SV_GroupThreadID)
{
    uint id = groupThreadId.x + groupId.x * NB_THREADS_PER_GROUP;
#if !VFX_USE_SPAWNER_FROM_GPU
    id += groupId.y * dispatchWidth * NB_THREADS_PER_GROUP;
#endif

#if VFX_USE_SPAWNER_FROM_GPU
    uint maxThreadId = inputAdditional.Load((offsetInAdditionalOutput * 2 + 0) << 2);
    uint currentSpawnIndex = inputAdditional.Load((offsetInAdditionalOutput * 2 + 1) << 2) - maxThreadId;
#else
    uint maxThreadId = nbSpawned;
    uint currentSpawnIndex = spawnIndex;
#endif

#if USE_DEAD_LIST
    maxThreadId = min(maxThreadId, deadListCount.Load(0x0));
#elif VFX_USE_SPAWNER_FROM_GPU
    maxThreadId = min(maxThreadId, nbMax); //otherwise, nbSpawned already clamped on CPU
#endif

    if (id < maxThreadId)
    {
#if VFX_USE_SPAWNER_FROM_GPU
        int sourceIndex = eventList[id];
#endif
		uint particleIndex = id + currentSpawnIndex;
		
#if !VFX_USE_SPAWNER_FROM_GPU
        int sourceIndex = 0;
        /*//Loop with 1 iteration generate a wrong IL Assembly (and actually, useless code)
        uint currentSumSpawnCount = 0u;
        for (sourceIndex=0; sourceIndex<1; sourceIndex++)
        {
            currentSumSpawnCount += uint(asfloat(sourceAttributeBuffer.Load((sourceIndex * 0x1 + 0x0) << 2)));
            if (id < currentSumSpawnCount)
            {
                break;
            }
        }
        */
        

#endif

		Attributes attributes = (Attributes)0;
		SourceAttributes sourceAttributes = (SourceAttributes)0;
		
        attributes.velocity = float3(0, 0, 0);
        attributes.seed = (uint)0;
        attributes.lifetime = (float)1;
        attributes.angleZ = (float)0;
        attributes.position = float3(0, 0, 0);
        attributes.direction = float3(0, 0, 1);
        attributes.alive = (bool)true;
        attributes.age = (float)0;
        

#if VFX_USE_PARTICLEID_CURRENT
         attributes.particleId = particleIndex;
#endif
#if VFX_USE_SEED_CURRENT
        attributes.seed = WangHash(particleIndex ^ systemSeed);
#endif
#if VFX_USE_SPAWNINDEX_CURRENT
        attributes.spawnIndex = id;
#endif
#if HAS_STRIPS
#if !VFX_USE_SPAWNER_FROM_GPU
		
#else
        uint stripIndex = sourceIndex;
#endif
		stripIndex = min(stripIndex, STRIP_COUNT);

        if (!GetParticleIndex(particleIndex, stripIndex))
            return;

        const StripData stripData = GetStripDataFromStripIndex(stripIndex, PARTICLE_PER_STRIP_COUNT);
		InitStripAttributesWithSpawn(maxThreadId, particleIndex, attributes, stripData);
		// TODO Change seed to be sure we're deterministic on random with strip
#endif
        
        {
            SetAttribute_E6295C0( /*inout */attributes.velocity,  /*inout */attributes.seed, float3(-0.100000001, 0.600000024, -0.100000001), float3(0.100000001, 1, 0.100000001));
        }
        SetAttribute_F01429A3( /*inout */attributes.lifetime,  /*inout */attributes.seed, A_b, B_b);
        {
            SetAttribute_48A7C211( /*inout */attributes.angleZ,  /*inout */attributes.seed, (float)360, (float)-360);
        }
        {
            PositionAABox_18D( /*inout */attributes.position,  /*inout */attributes.seed,  /*inout */attributes.direction, float3(0, 0, 0), Box_size_d);
        }
        

		
#if VFX_USE_ALIVE_CURRENT
        if (attributes.alive)
#endif       
        {
#if USE_DEAD_LIST
	        uint deadIndex = deadListIn.DecrementCounter();
            uint index = deadListIn[deadIndex];
#else
            uint index = particleIndex;
#endif
            attributeBuffer.Store3((index * 0x4 + 0x0) << 2,asuint(attributes.velocity));
            attributeBuffer.Store((index * 0x1 + 0x1D500) << 2,asuint(attributes.lifetime));
            attributeBuffer.Store((index * 0x1 + 0x24A40) << 2,asuint(attributes.angleZ));
            attributeBuffer.Store3((index * 0x4 + 0x2BF80) << 2,asuint(attributes.position));
            attributeBuffer.Store((index * 0x2 + 0x49480) << 2,uint(attributes.alive));
            attributeBuffer.Store((index * 0x2 + 0x49481) << 2,asuint(attributes.age));
            

        }
    }
}
